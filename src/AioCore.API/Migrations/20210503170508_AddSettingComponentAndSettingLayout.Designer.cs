// <auto-generated />
using System;
using AioCore.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AioCore.API.Migrations
{
    [DbContext(typeof(AioCoreContext))]
    [Migration("20210503170508_AddSettingComponentAndSettingLayout")]
    partial class AddSettingComponentAndSettingLayout
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicDateAggregate.DynamicDateAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DynamicDateAttributes");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicDateAggregate.DynamicDateValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Value")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("EntityId");

                    b.ToTable("DynamicDateValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicEntityAggregate.DynamicEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Data")
                        .HasColumnType("xml");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("DynamicEntities");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicFloatAggregate.DynamicFloatAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DynamicFloatAttributes");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicFloatAggregate.DynamicFloatValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<float>("Value")
                        .HasColumnType("real");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("EntityId");

                    b.ToTable("DynamicFloatValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicGuidAggregate.DynamicGuidAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DynamicGuidAttributes");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicGuidAggregate.DynamicGuidValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("Value")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("EntityId");

                    b.ToTable("DynamicGuidValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicIntegerAggregate.DynamicIntegerAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DynamicIntegerAttributes");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicIntegerAggregate.DynamicIntegerValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<int>("Value")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("EntityId");

                    b.ToTable("DynamicIntegerValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicStringAggregate.DynamicStringAttribute", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("DynamicStringAttributes");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicStringAggregate.DynamicStringValue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AttributeId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("EntityId")
                        .HasColumnType("uuid");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("AttributeId");

                    b.HasIndex("EntityId");

                    b.ToTable("DynamicStringValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingActionAggregate.SettingAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SettingActions");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingComponentAggregate.SettingComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("ParentType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SettingLayoutId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SettingLayoutId");

                    b.ToTable("SettingComponents");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingDomAggregate.SettingDom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttributeValues")
                        .HasColumnType("xml");

                    b.Property<string>("Attributes")
                        .HasColumnType("xml");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SettingLayoutId")
                        .HasColumnType("uuid");

                    b.Property<string>("TagName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SettingLayoutId");

                    b.ToTable("SettingDoms");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingEntityAggregate.SettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SettingEntities");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingFeatureAggregate.SettingFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SettingFeatures");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingFieldAggregate.SettingField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SettingFields");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingFormAggregate.SettingForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SettingForms");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingLayoutAggregate.SettingLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingLayouts");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingTenantAggregate.SettingTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FaviconId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LogoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingTenants");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingViewAggregate.SettingView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingViews");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicDateAggregate.DynamicDateValue", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.DynamicDateAggregate.DynamicDateAttribute", "Attribute")
                        .WithMany("DynamicDateValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.DynamicEntityAggregate.DynamicEntity", "Entity")
                        .WithMany("DynamicDateValues")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicFloatAggregate.DynamicFloatValue", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.DynamicFloatAggregate.DynamicFloatAttribute", "Attribute")
                        .WithMany("DynamicFloatValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.DynamicEntityAggregate.DynamicEntity", "Entity")
                        .WithMany("DynamicFloatValues")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicGuidAggregate.DynamicGuidValue", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.DynamicGuidAggregate.DynamicGuidAttribute", "Attribute")
                        .WithMany("DynamicGuidValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.DynamicEntityAggregate.DynamicEntity", "Entity")
                        .WithMany("DynamicGuidValues")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicIntegerAggregate.DynamicIntegerValue", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.DynamicIntegerAggregate.DynamicIntegerAttribute", "Attribute")
                        .WithMany("DynamicIntegerValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.DynamicEntityAggregate.DynamicEntity", "Entity")
                        .WithMany("DynamicIntegerValues")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicStringAggregate.DynamicStringValue", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.DynamicStringAggregate.DynamicStringAttribute", "Attribute")
                        .WithMany("DynamicStringValues")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.DynamicEntityAggregate.DynamicEntity", "Entity")
                        .WithMany("DynamicStringValues")
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Attribute");

                    b.Navigation("Entity");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingComponentAggregate.SettingComponent", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SettingLayoutAggregate.SettingLayout", null)
                        .WithMany("Components")
                        .HasForeignKey("SettingLayoutId");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingDomAggregate.SettingDom", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SettingComponentAggregate.SettingComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SettingFeatureAggregate.SettingFeature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SettingDomAggregate.SettingDom", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SettingLayoutAggregate.SettingLayout", null)
                        .WithMany("Doms")
                        .HasForeignKey("SettingLayoutId");

                    b.Navigation("Component");

                    b.Navigation("Feature");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingEntityAggregate.SettingEntity", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SettingTenantAggregate.SettingTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicDateAggregate.DynamicDateAttribute", b =>
                {
                    b.Navigation("DynamicDateValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicEntityAggregate.DynamicEntity", b =>
                {
                    b.Navigation("DynamicDateValues");

                    b.Navigation("DynamicFloatValues");

                    b.Navigation("DynamicGuidValues");

                    b.Navigation("DynamicIntegerValues");

                    b.Navigation("DynamicStringValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicFloatAggregate.DynamicFloatAttribute", b =>
                {
                    b.Navigation("DynamicFloatValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicGuidAggregate.DynamicGuidAttribute", b =>
                {
                    b.Navigation("DynamicGuidValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicIntegerAggregate.DynamicIntegerAttribute", b =>
                {
                    b.Navigation("DynamicIntegerValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.DynamicStringAggregate.DynamicStringAttribute", b =>
                {
                    b.Navigation("DynamicStringValues");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingLayoutAggregate.SettingLayout", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Doms");
                });
#pragma warning restore 612, 618
        }
    }
}
