// <auto-generated />
using System;
using AioCore.Infrastructure.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace AioCore.API.Migrations
{
    [DbContext(typeof(AioCoreContext))]
    [Migration("20210529040228_Tenant-Add-DatabaseType")]
    partial class TenantAddDatabaseType
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.6")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingActionAggregate.SettingAction", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingActions");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingComponentAggregate.SettingComponent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<int>("ComponentType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("ParentType")
                        .HasColumnType("integer");

                    b.Property<Guid?>("SettingLayoutId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("SettingLayoutId");

                    b.ToTable("SettingComponents");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingDomAggregate.SettingDom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AttributeValues")
                        .HasColumnType("xml");

                    b.Property<string>("Attributes")
                        .HasColumnType("xml");

                    b.Property<Guid>("ComponentId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("FeatureId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("SettingLayoutId")
                        .HasColumnType("uuid");

                    b.Property<string>("TagName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ComponentId");

                    b.HasIndex("FeatureId");

                    b.HasIndex("ParentId");

                    b.HasIndex("SettingLayoutId");

                    b.ToTable("SettingDoms");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingEntityAggregate.SettingEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SettingEntities");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingFeatureAggregate.SettingFeature", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Icon")
                        .HasColumnType("text");

                    b.Property<Guid>("LayoutId")
                        .HasColumnType("uuid");

                    b.Property<int>("Left")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<bool>("Moving")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Right")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RootId")
                        .HasColumnType("uuid");

                    b.Property<string>("Slug")
                        .HasColumnType("text");

                    b.Property<string>("XmlPage")
                        .HasColumnType("xml");

                    b.HasKey("Id");

                    b.HasIndex("LayoutId");

                    b.ToTable("SettingFeatures");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingFieldAggregate.SettingField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<int>("FieldType")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingFields");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingFormAggregate.SettingForm", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingForms");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingLayoutAggregate.SettingLayout", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingLayouts");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingViewAggregate.SettingView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SettingViews");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemApplicationAggregate.SystemApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("LogoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SystemApplications");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemGroupAggregate.SystemGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Left")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<bool>("Moving")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Right")
                        .HasColumnType("integer");

                    b.Property<Guid?>("RootId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SystemGroups");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemPermissionAggregate.SystemPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("RecordId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("SystemPermissions");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemPermissionSetAggregate.SystemPermissionSet", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PermissionId")
                        .HasColumnType("uuid");

                    b.Property<int>("Policy")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("PermissionId");

                    b.ToTable("SystemPermissionSets");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemPolicyAggregate.SystemPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Action")
                        .HasColumnType("text");

                    b.Property<string>("Controller")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("SystemPolicies");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemTenantAggregate.SystemTenant", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Database")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("DatabaseType")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<Guid>("FaviconId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("LogoId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Schema")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)");

                    b.Property<string>("Server")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("User")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.ToTable("SystemTenants");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemTenantAggregate.SystemTenantApplication", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId");

                    b.HasIndex("TenantId");

                    b.ToTable("SystemTenantApplications");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemUserAggregate.SystemUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Account")
                        .HasColumnType("text");

                    b.Property<DateTimeOffset>("Created")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset>("Modified")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<Guid>("TenantId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("TenantId");

                    b.ToTable("SystemUsers");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemUserAggregate.SystemUserGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("GroupId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("GroupId");

                    b.HasIndex("UserId");

                    b.ToTable("SystemUserGroups");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemUserAggregate.SystemUserPolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("PolicyId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PolicyId");

                    b.HasIndex("UserId");

                    b.ToTable("SystemUserPolicies");
                });

            modelBuilder.Entity("SettingFeatureSettingFeature", b =>
                {
                    b.Property<Guid>("ChildrenId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescendantsId")
                        .HasColumnType("uuid");

                    b.HasKey("ChildrenId", "DescendantsId");

                    b.HasIndex("DescendantsId");

                    b.ToTable("SettingFeatureSettingFeature");
                });

            modelBuilder.Entity("SystemGroupSystemGroup", b =>
                {
                    b.Property<Guid>("ChildrenId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DescendantsId")
                        .HasColumnType("uuid");

                    b.HasKey("ChildrenId", "DescendantsId");

                    b.HasIndex("DescendantsId");

                    b.ToTable("SystemGroupSystemGroup");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingComponentAggregate.SettingComponent", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SettingLayoutAggregate.SettingLayout", null)
                        .WithMany("Components")
                        .HasForeignKey("SettingLayoutId");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingDomAggregate.SettingDom", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SettingComponentAggregate.SettingComponent", "Component")
                        .WithMany()
                        .HasForeignKey("ComponentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SettingFeatureAggregate.SettingFeature", "Feature")
                        .WithMany()
                        .HasForeignKey("FeatureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SettingDomAggregate.SettingDom", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SettingLayoutAggregate.SettingLayout", null)
                        .WithMany("Doms")
                        .HasForeignKey("SettingLayoutId");

                    b.Navigation("Component");

                    b.Navigation("Feature");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingEntityAggregate.SettingEntity", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SystemTenantAggregate.SystemTenant", "Tenant")
                        .WithMany()
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingFeatureAggregate.SettingFeature", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SettingLayoutAggregate.SettingLayout", "Layout")
                        .WithMany()
                        .HasForeignKey("LayoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Layout");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemPermissionSetAggregate.SystemPermissionSet", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SystemPermissionAggregate.SystemPermission", "Permission")
                        .WithMany("PermissionSets")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemTenantAggregate.SystemTenantApplication", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SystemApplicationAggregate.SystemApplication", "Application")
                        .WithMany("TenantApplications")
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SystemTenantAggregate.SystemTenant", "Tenant")
                        .WithMany("TenantApplications")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Application");

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemUserAggregate.SystemUser", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SystemTenantAggregate.SystemTenant", "Tenant")
                        .WithMany("Users")
                        .HasForeignKey("TenantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Tenant");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemUserAggregate.SystemUserGroup", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SystemGroupAggregate.SystemGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SystemUserAggregate.SystemUser", "User")
                        .WithMany("Groups")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Group");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemUserAggregate.SystemUserPolicy", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SystemPolicyAggregate.SystemPolicy", "Policy")
                        .WithMany()
                        .HasForeignKey("PolicyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SystemUserAggregate.SystemUser", "User")
                        .WithMany("Policies")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Policy");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SettingFeatureSettingFeature", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SettingFeatureAggregate.SettingFeature", null)
                        .WithMany()
                        .HasForeignKey("ChildrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SettingFeatureAggregate.SettingFeature", null)
                        .WithMany()
                        .HasForeignKey("DescendantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SystemGroupSystemGroup", b =>
                {
                    b.HasOne("AioCore.Domain.AggregatesModel.SystemGroupAggregate.SystemGroup", null)
                        .WithMany()
                        .HasForeignKey("ChildrenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AioCore.Domain.AggregatesModel.SystemGroupAggregate.SystemGroup", null)
                        .WithMany()
                        .HasForeignKey("DescendantsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SettingLayoutAggregate.SettingLayout", b =>
                {
                    b.Navigation("Components");

                    b.Navigation("Doms");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemApplicationAggregate.SystemApplication", b =>
                {
                    b.Navigation("TenantApplications");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemPermissionAggregate.SystemPermission", b =>
                {
                    b.Navigation("PermissionSets");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemTenantAggregate.SystemTenant", b =>
                {
                    b.Navigation("TenantApplications");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("AioCore.Domain.AggregatesModel.SystemUserAggregate.SystemUser", b =>
                {
                    b.Navigation("Groups");

                    b.Navigation("Policies");
                });
#pragma warning restore 612, 618
        }
    }
}
